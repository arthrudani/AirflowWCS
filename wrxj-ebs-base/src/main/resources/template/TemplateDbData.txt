/* ***************************************************************************
  Copyright (c) ZZZYEARZZZ Daifuku North America Holding Company. All Rights Reserved.

  THIS WORK IS SUBJECT TO U.S. AND INTERNATIONAL COPYRIGHT LAWS AND TREATIES. 
  NO PART OF THIS WORK MAY BE USED, PRACTICED, PERFORMED COPIED, DISTRIBUTED, 
  REVISED, MODIFIED, TRANSLATED, ABRIDGED, CONDENSED, EXPANDED, COLLECTED, 
  COMPILED, LINKED, RECAST, TRANSFORMED OR ADAPTED WITHOUT THE PRIOR WRITTEN 
  CONSENT OF Wynright Corporation.  ANY USE OR EXPLOITATION OF THIS WORK 
  WITHOUT AUTHORIZATION COULD SUBJECT THE PERPETRATOR TO CRIMINAL AND CIVIL 
  LIABILITY.
 ****************************************************************************/
package com.daifukuamerica.wrxj.dbadapter.data;

import static com.daifukuamerica.wrxj.dbadapter.data.ZZZOBJECTNAMEZZZEnum.*;

import com.daifukuamerica.wrxj.dbadapter.AbstractSKDCData;
import com.daifukuamerica.wrxj.dbadapter.TableEnum;
import com.daifukuamerica.wrxj.jdbc.ColumnObject;
import java.util.Arrays;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Class to hold ZZZTABLENAMEZZZ data
 */
public class ZZZOBJECTNAMEZZZData extends AbstractSKDCData
{
ZZZCOLUMNNAMESZZZ
  private static final Map<String, TableEnum> mpColumnMap = new ConcurrentHashMap<String, TableEnum>();

  // ------------------- ZZZOBJECTNAMEZZZ table data -----------------------------
ZZZCOLUMNVARSZZZ
  //-------------------- ZZZOBJECTNAMEZZZ default data ---------------------------
  public ZZZOBJECTNAMEZZZData()
  {
    super();
    clear();
    initColumnMap(mpColumnMap, ZZZOBJECTNAMEZZZEnum.class);
  }

  @Override
  public String toString()
  {
    StringBuffer myString = new StringBuffer(getClass().getCanonicalName()).append("\n");
    String[] vasKeys = mpColumnMap.keySet().toArray(new String[0]);
    Arrays.sort(vasKeys);
    for (String sKey : vasKeys) {
      ColumnObject vpVal = getColumnObject(sKey);
      String vsVal = vpVal == null ? null : 
        vpVal.getColumnValue() == null ? null : vpVal.getColumnValue().toString();
      myString.append(" * ").append(sKey).append(" = ").append(vsVal).append(";\n");
    }
    return myString.toString();
  }

  @Override
  public boolean equals(AbstractSKDCData absOther)
  {
    ZZZOBJECTNAMEZZZData other = (ZZZOBJECTNAMEZZZData)absOther;
    // TODO: Implement
    return other.getId().equals(getId());
  }


/*---------------------------------------------------------------------------
   Getters
 ---------------------------------------------------------------------------*/
ZZZGETTERSZZZ

/*---------------------------------------------------------------------------
   Setters
 ---------------------------------------------------------------------------*/
ZZZSETTERSZZZ
  /**
   * Required set field method. This method figures out what column was passed
   * to it and sets the value. This allows us to have a generic method for all
   * DB interfaces.
   */
  @Override
  public int setField(String isColName, Object ipColValue)
  {
    TableEnum vpEnum = mpColumnMap.get(isColName);
    if (vpEnum == null) 
    {
      return super.setField(isColName, ipColValue);
    }
    
    switch ((ZZZOBJECTNAMEZZZEnum)vpEnum)
    {
ZZZSETTERSWITCHZZZ      default:
        throw new IllegalArgumentException("Unknown field " + isColName);
    }
    return 0;
  }
}
