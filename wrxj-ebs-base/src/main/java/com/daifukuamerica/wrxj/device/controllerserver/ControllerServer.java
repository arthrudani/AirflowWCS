package com.daifukuamerica.wrxj.device.controllerserver;

import com.daifukuamerica.wrxj.clc.ReadOnlyProperties;
import com.daifukuamerica.wrxj.controller.Controller;
import com.daifukuamerica.wrxj.controller.ControllerConsts;
import com.daifukuamerica.wrxj.controller.ControllerCreationException;
import com.daifukuamerica.wrxj.controller.ControllerFactory;
import com.daifukuamerica.wrxj.controller.DaemonController;
import com.daifukuamerica.wrxj.factory.Factory;
import com.daifukuamerica.wrxj.messageformat.controlevent.ControlEventDataFormat;
import com.daifukuamerica.wrxj.swingui.monitor.MonitorFrame;
import java.util.List;

/**
 * @author Stephen Kendorski
 *
 */
public final class ControllerServer extends DaemonController
{
  ControlEventDataFormat mpCEDF;
  
  /**
   * Class constructor.
   * 
   * <p><b>Details:</b> This constructor creates a bare minimum of a Controller.
   * Whoever created this Controller will then call <tt>initialize</tt> which
   * should subscribe to any collaborators and then call <tt>startup</tt>
   * which should then do anything useful to get a Controller running.</p>
   */
  private ControllerServer()
  {
  }

  /**
   * Initialize the ControllerServer
   */
  @Override
  public void initialize(String isControllerKeyName)
  {
//    isControllerKeyName = isControllerKeyName + ":" + Application.getString(WarehouseRx.RUN_MODE);
    super.initialize(isControllerKeyName);
    logger.logDebug("ControllerServer.initialize() - Start");
    subscribeControlEvent();
    logger.logDebug("ControllerServer.initialize() - End");
  }

  /*--------------------------------------------------------------------------*/
  @Override
  public void startup()
  {
    super.startup();
    logger.logDebug("ControllerServer.startup() - Start");
    setControllerStatus(ControllerConsts.STATUS_RUNNING);
    mpCEDF = Factory.create(ControlEventDataFormat.class, getName());
    logger.logDebug("ControllerServer.startup() - End");
  }

  /**
   * We have received a CONTROL EVENT (probably from a User's Form)
   */
  @Override
  protected void processControlEvent()
  {
    mpCEDF.parseCommandTargetListCommand(receivedText);
    String vsCommand = mpCEDF.getMessageCommand();
    List<String> vpDeviceNames = mpCEDF.getMessageTargets();
    
    if (vsCommand.equals(ControlEventDataFormat.CONTROLLER_STARTUP))
    {
      if (isAllControllers(vpDeviceNames))
        ControllerFactory.startAllControllers();
      else
        ControllerFactory.startControllers(vpDeviceNames);
    }
    else if (vsCommand.equals(ControlEventDataFormat.CONTROLLER_SHUTDOWN))
    {
      if (isAllControllers(vpDeviceNames))
        ControllerFactory.stopAllControllers();
      else
        ControllerFactory.stopControllers(vpDeviceNames);
    }
  }

  /**
   * Determines whether controller list indicates all controllers.
   * 
   * <p><b>Details:</b> This method determines whether the given controller list 
   * was generated by a command to start or stop all controllers.  In
   * particular, this method returns <code>true</code> if and only if the 
   * first element in the supplied controller list is equal to a magic string 
   * representing all controllers ({@link MonitorFrame#ALL_CONTROLLERS}).</p>
   * 
   * @param ipControllers the controller list
   * @return true iff the list indicates all controllers
   */
  private static boolean isAllControllers(List<String> ipControllers)
  {
    String vsController = ipControllers.get(0);
    return MonitorFrame.ALL_CONTROLLERS.equals(vsController);
  }
  
  /**
   * Factory for ControllerImplFactory.
   *
   * <p><b>Details:</b> <code>create</code> is a factory method used exclusively
   * by <code>ControllerImplFactory</code>.  Configurable properties of a new
   * controller created using this method are initialized using data in the
   * supplied properties object.  If the controller cannot be created, a
   * <code>ControllerCreationException</code> is thrown.</p>
   *
   * @param ipConfig configurable property definitions
   * @return the created controller
   * @throws ControllerCreationException if an error occurred while creating the controller
   */
  public static Controller create(ReadOnlyProperties ipConfig) throws ControllerCreationException
  {
    Controller vpController = new ControllerServer();
    return vpController;
  }
}
