package com.daifukuamerica.wrxj.host.messages.fixedlength;

import com.daifukuamerica.wrxj.host.MessageNameEnum;
import com.daifukuamerica.wrxj.host.messages.MessageFormatter;
import com.daifukuamerica.wrxj.host.messages.MessageHelper;
import com.daifukuamerica.wrxj.host.messages.MessageOutNames;
import com.daifukuamerica.wrxj.jdbc.ColumnObject;
import com.daifukuamerica.wrxj.jdbc.DBInfo;
import com.daifukuamerica.wrxj.util.SKDCUtility;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Description:<BR>
 * Class for formatting fixed length messages.
 *
 * @author       A.D.
 * @version      1.0   05/29/2006
 */
public class FixedLengthFormatter implements MessageFormatter 
{
  protected SimpleDateFormat mpDateFmt = new SimpleDateFormat(MessageHelper.HOST_DATETIME_FORMAT);

 /**
  *  {@inheritDoc} The message content returned here has no sequence #
  *  or name inserted.  In the TCP/IP case, this info. is pre-pended before the
  *  message is sent.  In the DB Host case, it is up to the host program to read
  *  all the fields in the database table to get the correct info. (i.e. the
  *  sMessageIdentifier, and iMessageSequence columns in the HostToWRx table).
   * @param ipFields the message field name-value pair.
   * @param ipMessageName enum of message identifier.
   * @return a fixed length formatted string.
  */
  @Override
  public String formatMessage(ColumnObject[] ipFields, MessageNameEnum ipMessageName)
  {
    String vsMessageContent = "";
    if (ipMessageName == MessageOutNames.HOST_ERROR)
    {
                                       // Next is the Error code.
      vsMessageContent += SKDCUtility.spaceFillTrailing(ipFields[0].getColumnValue().toString(), 8);
                                       // Next is the Sequence #.
      vsMessageContent += SKDCUtility.spaceFillTrailing(ipFields[1].getColumnValue().toString(), 8);
                                       // The standard error text associated with the Error code.
      vsMessageContent += SKDCUtility.spaceFillTrailing(ipFields[2].getColumnValue().toString(), 60);
                                       // The error message generated by the parser.
      vsMessageContent += SKDCUtility.spaceFillTrailing(ipFields[3].getColumnValue().toString(), 70);
    }
    else
    {
      for(ColumnObject vpCObj : ipFields)
      {
        int vnFieldLength;
        if (DBInfo.getFieldType(vpCObj.getColumnName()) == Types.DATE ||
            vpCObj.getColumnName().equalsIgnoreCase("dTransactionTime"))
        {
          vnFieldLength = MessageHelper.HOST_DATETIME_FORMAT.length();
          vsMessageContent += SKDCUtility.spaceFillTrailing(mpDateFmt.format((Date)vpCObj.getColumnValue()),
                                                            vnFieldLength);
        }
        else
        {
          vnFieldLength = DBInfo.getFieldLength(vpCObj.getColumnName());
          vsMessageContent += SKDCUtility.spaceFillTrailing(vpCObj.getColumnValue().toString(),
                                                            vnFieldLength);
        }
      }
    }

    return(vsMessageContent);
  }

 /**
  *  {@inheritDoc} Method exists here to comply with an interface only.
  * @param inMesgSeq
  * @param isMesgIdentifier
  */
  @Override
  public String addPostFormatWrapper(String isContent, String isMesgIdentifier,
                                     int inMesgSeq)
  {
    String vsWrappedMesg;
                                       // +2 to account for STX, ETX that will
                                       // be tacked on by TCPIP interface.
    int vnMessageLength = MessageHelper.MESSAGE_SEQUENCE_LENGTH +
                          MessageHelper.MESSAGE_LENGTH_PADDING +
                          MessageHelper.MESSAGE_IDENTIFIER_LENGTH +
                          isContent.length() + 2;

    vsWrappedMesg = SKDCUtility.preZeroFill(inMesgSeq, MessageHelper.MESSAGE_SEQUENCE_LENGTH);
    vsWrappedMesg += SKDCUtility.preZeroFill(vnMessageLength,
                                             MessageHelper.MESSAGE_LENGTH_PADDING);
    vsWrappedMesg += SKDCUtility.spaceFillTrailing(isMesgIdentifier,
                                                   MessageHelper.MESSAGE_IDENTIFIER_LENGTH);
    vsWrappedMesg += isContent;

    return(vsWrappedMesg);
  }

 /**
  *  {@inheritDoc}
  */
  @Override
  public void clear()
  {
    //sMessage = "";
  }
}
